<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet" href="stylesheets/style.css">
</head>

<body>
  <section>
    <div class="container">
      <div id="tool-bar">
        <h1>Draw</h1>
        <label for="stroke">Stroke</label>
        <input id="stroke" name="stroke" type="color">
        <label for="line-width">Line width</label>
        <input id="line-width" name="line-width" type="number" value="5">
        <button id="clear">Clear</button>
        <button id="save">Save</button>
      </div>
      <div class="drawing-board">
        <canvas id="drawing-board">

        </canvas>
      </div>
    </div>
  </section>
</body>
<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io()
  const canvas = document.getElementById('drawing-board')
  const toolBar = document.getElementById('tool-bar')
  const ctx = canvas.getContext('2d')

  const canvasOffsetX = canvas.offsetLeft
  const canvasOffsetY = canvas.offsetTop

  canvas.width = window.innerWidth - canvasOffsetX
  canvas.height = window.innerHeight - canvasOffsetY

  let isPainting = false
  let collabPainting = false
  let lineWidth = 5
  let clientX
  let clientY
  // let startX
  // let startY

  toolBar.addEventListener('click', (e) => {
    if (e.target.id === 'clear') {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
    }
    if (e.target.id === 'save') {
      let url = canvas.toDataURL()
      console.log(url)
    }
  })

  toolBar.addEventListener('change', (e) => {
    if (e.target.id === 'stroke') {
      ctx.strokeStyle = e.target.value
    }
    if (e.target.id === 'line-width') {
      lineWidth = e.target.value
    }
  })

  const draw = (clientX, clientY) => {
    if (!isPainting) {
      return
    }
    console.log("..")
    ctx.lineWidth = lineWidth
    ctx.lineCap = 'round'
    ctx.lineTo(clientX - canvasOffsetX, clientY)
    ctx.stroke()
  }

  const mouseDown = (e) => {
    console.log('hhhhh')
    isPainting = true
    //startX = e.clientX
    //startY = e.clientY
    //ctx.beginPath()

  }
  const mouseUp = (e) => {
    console.log(e)
    socket.emit('mouseup')
    isPainting = false
    ctx.stroke()
    ctx.beginPath()
  }

  const mouseMOve = (e) => {
    clientX = e.clientX
    clientY = e.clientY
    if (e.type === 'touchmove') {
      clientX = e.touches[0].clientX
      clientY = e.touches[0].clientY
    }
    if (isPainting) {
      socket.emit('collab', { clientX, clientY })
      draw(clientX, clientY)
    }
  }
  // mouse events
  canvas.addEventListener('mousedown', mouseDown)
  canvas.addEventListener('mouseup', mouseUp)
  canvas.addEventListener('mousemove', mouseMOve)

  //touch events
  canvas.addEventListener('touchstart', mouseDown)
  canvas.addEventListener('touchend', mouseUp)
  canvas.addEventListener('touchmove', mouseMOve)

  //socket events
  socket.on('collab', ({ clientX, clientY }) => {
    isPainting = true
    collabPainting = true
    draw(clientX, clientY)
  })
  socket.on('mouseup', () => {
    ctx.beginPath()
    isPainting = false
  })

</script>

</html>